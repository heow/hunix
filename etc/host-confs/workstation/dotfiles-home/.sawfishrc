
; set the slide vaule to a big chunk
(setq slide-window-increment 128)

;;(defun my-bind-keys (char function &optional preserve-prefix)
;;  (if (and preserve-prefix
;;           (string= (window-class (input-focus)) "Emacs"))
;;      (synthesize-event preserve-prefix (input-focus))
;;    (when (grab-keyboard)
;;      (let ((read-event
;;             (lambda ()
;;               (throw 'read (event-name (current-event))))))
;;        (unwind-protect
;;            (progn
;;              (add-hook 'unbound-key-hook read-event)
;;              (when (string= (catch 'read (recursive-edit)) char)
;;                (funcall function)))
;;          (remove-hook 'unbound-key-hook read-event)
;;          (ungrab-keyboard))))))
;
;;; binds for not-emacs
;;(bind-keys global-keymap "C-c" '(my-bind-keys "b" popup-window-list "C-c"))
;
;;;
;;; misc
;;;
;
;(require 'focus-by-direction)
;
;;;
;;; background graphics
;;; 
;
;(defvar wb-picture-path "/home/heow/res/art-desktop/")
;;(defvar wb-cmd "qiv")
;(defvar wb-cmd "/home/heow/.hunix/bin/qiv.sh") ; ubuntu 6.10
;(defvar wb-picture-list '( 
;                          ("chamelea-blur.jpg" . t)   ; 1
;                          ("protist-blur.jpg" . t)   ; 2
;                          ("starbirth-blur.jpg" . t) ; 3
;                          ("spark-blur.jpg" . t)     ; 4
;;                          ("tendrils-blur.jpg" . t)  
;;                          ("grid-blur.jpg" . t)
;;                          ("maze-blur.jpg" . t)
;;                          ("singularity-blur.jpg" . t)
;                          ))
;
;(require 'accurately-set-a-workspace-background)
;(add-hook 'after-initialization-hook wb-switch)
;(add-hook 'enter-workspace-hook wb-switch)
;
;;;
;;; viewports are back!
;;; 
;(require 'sawfish.wm.viewport)
;
;(define-special-variable customize-command-classes '(viewport default)
;  "Also include commands of these classes the key bindings panel.
;Add the `viewport' keyboard to make viewport commands show up.")
;
;(setq viewport-dimensions '(2 . 2))
;
;;(load "keys")
;
;;(let ((sendto (assoc "_Send window to" window-ops-menu)))
;;  (if sendto
;;      (nconc (cdr sendto)
;;	     `(()
;;	       ("_Left"  move-window-left)
;;	       ("_Right" move-window-right)
;;	       ("_Up"    move-window-up)
;;	       ("_Down"  move-window-down) ) )
;;    (error ".sawfishrc: \"_Send window to\" menu not found") ) )
;
;;;;
;;;; key mappings
;;;;
;;(setq global-keymap
;;      (bind-keys (make-keymap)
;;
;;         ;; workspace operations
;;         "M-C-Right"          next-workspace 
;;         "M-C-Down"           next-workspace 
;;         "M-C-Up"             previous-workspace 
;;         "M-C-Left"           previous-workspace 
;;
;;         ;; viewport operations
;;         "M-1"                (lambda() (activate-viewport 1 1)) 
;;         "M-2"                (lambda() (activate-viewport 2 1)) 
;;         "M-3"                (lambda() (activate-viewport 1 2)) 
;;         "M-4"                (lambda() (activate-viewport 2 2)) 
;;
;;         ;; viewport window movement
;;         "M-Down"             move-window-down 
;;         "M-Left"             move-window-left 
;;         "M-Right"            move-window-right 
;;         "M-Up"               move-window-up 
;;
;;         ;; window movement 
;;         "S-C-Down"           pack-window-down 
;;         "S-C-Up"             pack-window-up 
;;         "S-C-Right"          pack-window-right 
;;         "S-C-Left"           pack-window-left 
;;
;;         ;; window movement - tiling
;;         "Mod4-KP_End"      (lambda() (rsk-grid-place-window 1)) 
;;         "Mod4-KP_Down"     (lambda() (rsk-grid-place-window 2)) 
;;         "Mod4-KP_Next"     (lambda() (rsk-grid-place-window 3)) 
;;         "Mod4-KP_Left"     (lambda() (rsk-grid-place-window 4)) 
;;         "Mod4-KP_Begin"    (lambda() (rsk-grid-place-window 5)) 
;;         "Mod4-KP_Right"    (lambda() (rsk-grid-place-window 6)) 
;;         "Mod4-KP_Home"     (lambda() (rsk-grid-place-window 7)) 
;;         "Mod4-KP_Up"       (lambda() (rsk-grid-place-window 8)) 
;;         "Mod4-KP_Prior"    (lambda() (rsk-grid-place-window 9)) 
;;
;;         ;; window movement - fine
;;         "Mod4-Left"     (lambda() (rsk-shove-size-window 'left 30)) 
;;         "Mod4-Right"    (lambda() (rsk-shove-size-window 'right 30)) 
;;         "Mod4-Up"       (lambda() (rsk-shove-size-window 'up 30)) 
;;         "Mod4-Down"     (lambda() (rsk-shove-size-window 'down 30)) 
;;
;;         ;; window height
;;         "C-Down"             lower-window 
;;         "C-Up"               raise-window 
;;
;;         ;; window focus
;;         "M-TAB"              cycle-windows 
;;         "M-SPC"              toggle-window-sticky 
;;
;;         ;; directional window focus
;;         "Mod4-Right"         focus-east 
;;         "Mod4-Up"            focus-north 
;;         "Mod4-Left"          focus-west 
;;         "Mod4-Down"          focus-south 
;;
;;         ;; window resizing
;;         "C-Right"            maximize-window-horizontally-toggle 
;;         "C-Left"             maximize-window-vertically-toggle 
;;
;;         ;; misc
;;         "M-F12"              call-command-with-output-to-screen 
;;         "M-RET"              toggle-window-shaded 
;;         "C-ESC"              popup-root-menu 
;;         "M-F4"               delete-window-safely 
;;
;;         ;; places
;;         "M-C-p"    (lambda() (run-shell-command "$HOME/bin/br $HOME/prj")) 
;;         "M-C-t"    (lambda() (run-shell-command "$HOME/bin/br $HOME/tmp/")) 
;;         "M-C-m"    (lambda() (run-shell-command "$HOME/bin/br $HOME/mnt/")) 
;;         "M-C-r"    (lambda() (run-shell-command "$HOME/bin/br $HOME/res")) 
;;         "M-C-h"    (lambda() (run-shell-command "$HOME/bin/br $HOME")) 
;;
;;         ;; programs
;;         "C-T"     (lambda() (run-shell-command "/usr/bin/xterm -ls")) 
;;         "C-R"     (lambda() (run-shell-command "$HOME/bin/grun.sh")) 
;;         "C-E"     (lambda() (run-shell-command "$HOME/bin/e")) ;
;))
;
;;         ((gimme-exact-class "Emacs" "emacs")               . "" )
;;         ((gimme-exact-class "XTerm" "xterm")               . "" )
;;         ((gimme-exact-class "grpn"  "grpn")                . "" )
